-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Subscription exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias OnCreateQuestionOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionQuestionFilterInput }


onCreateQuestion :
    (OnCreateQuestionOptionalArguments -> OnCreateQuestionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Question
    -> SelectionSet (Maybe decodesTo) RootSubscription
onCreateQuestion fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionQuestionFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onCreateQuestion" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnUpdateQuestionOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionQuestionFilterInput }


onUpdateQuestion :
    (OnUpdateQuestionOptionalArguments -> OnUpdateQuestionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Question
    -> SelectionSet (Maybe decodesTo) RootSubscription
onUpdateQuestion fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionQuestionFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onUpdateQuestion" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnDeleteQuestionOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionQuestionFilterInput }


onDeleteQuestion :
    (OnDeleteQuestionOptionalArguments -> OnDeleteQuestionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Question
    -> SelectionSet (Maybe decodesTo) RootSubscription
onDeleteQuestion fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionQuestionFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onDeleteQuestion" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
