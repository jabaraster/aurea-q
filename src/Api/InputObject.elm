-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Enum.ModelAttributeTypes
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildCreateQuestionInput :
    CreateQuestionInputRequiredFields
    -> (CreateQuestionInputOptionalFields -> CreateQuestionInputOptionalFields)
    -> CreateQuestionInput
buildCreateQuestionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent }
    in
    { id = optionals____.id, text = required____.text, contributorId = required____.contributorId, contributionDatetime = required____.contributionDatetime }


type alias CreateQuestionInputRequiredFields =
    { text : String
    , contributorId : String
    , contributionDatetime : Api.ScalarCodecs.AWSDateTime
    }


type alias CreateQuestionInputOptionalFields =
    { id : OptionalArgument Api.ScalarCodecs.Id }


{-| Type for the CreateQuestionInput input object.
-}
type alias CreateQuestionInput =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , text : String
    , contributorId : String
    , contributionDatetime : Api.ScalarCodecs.AWSDateTime
    }


{-| Encode a CreateQuestionInput into a value that can be used as an argument.
-}
encodeCreateQuestionInput : CreateQuestionInput -> Value
encodeCreateQuestionInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "text", Encode.string input____.text |> Just ), ( "contributorId", Encode.string input____.contributorId |> Just ), ( "contributionDatetime", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecAWSDateTime) input____.contributionDatetime |> Just ) ]


buildDeleteQuestionInput :
    DeleteQuestionInputRequiredFields
    -> DeleteQuestionInput
buildDeleteQuestionInput required____ =
    { id = required____.id }


type alias DeleteQuestionInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


{-| Type for the DeleteQuestionInput input object.
-}
type alias DeleteQuestionInput =
    { id : Api.ScalarCodecs.Id }


{-| Encode a DeleteQuestionInput into a value that can be used as an argument.
-}
encodeDeleteQuestionInput : DeleteQuestionInput -> Value
encodeDeleteQuestionInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ) ]


buildModelBooleanInput :
    (ModelBooleanInputOptionalFields -> ModelBooleanInputOptionalFields)
    -> ModelBooleanInput
buildModelBooleanInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, attributeExists = Absent, attributeType = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType }


type alias ModelBooleanInputOptionalFields =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Type for the ModelBooleanInput input object.
-}
type alias ModelBooleanInput =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Encode a ModelBooleanInput into a value that can be used as an argument.
-}
encodeModelBooleanInput : ModelBooleanInput -> Value
encodeModelBooleanInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.bool |> Encode.optional input____.ne ), ( "eq", Encode.bool |> Encode.optional input____.eq ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ) ]


buildModelFloatInput :
    (ModelFloatInputOptionalFields -> ModelFloatInputOptionalFields)
    -> ModelFloatInput
buildModelFloatInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, attributeExists = Absent, attributeType = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType }


type alias ModelFloatInputOptionalFields =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Type for the ModelFloatInput input object.
-}
type alias ModelFloatInput =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Encode a ModelFloatInput into a value that can be used as an argument.
-}
encodeModelFloatInput : ModelFloatInput -> Value
encodeModelFloatInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.float |> Encode.optional input____.ne ), ( "eq", Encode.float |> Encode.optional input____.eq ), ( "le", Encode.float |> Encode.optional input____.le ), ( "lt", Encode.float |> Encode.optional input____.lt ), ( "ge", Encode.float |> Encode.optional input____.ge ), ( "gt", Encode.float |> Encode.optional input____.gt ), ( "between", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ) ]


buildModelIDInput :
    (ModelIDInputOptionalFields -> ModelIDInputOptionalFields)
    -> ModelIDInput
buildModelIDInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, attributeExists = Absent, attributeType = Absent, size = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType, size = optionals____.size }


type alias ModelIDInputOptionalFields =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Type for the ModelIDInput input object.
-}
type alias ModelIDInput =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Encode a ModelIDInput into a value that can be used as an argument.
-}
encodeModelIDInput : ModelIDInput -> Value
encodeModelIDInput input____ =
    Encode.maybeObject
        [ ( "ne", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ne ), ( "eq", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.eq ), ( "le", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.le ), ( "lt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.lt ), ( "ge", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ge ), ( "gt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.gt ), ( "contains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.contains ), ( "notContains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.notContains ), ( "between", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.beginsWith ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ), ( "size", encodeModelSizeInput |> Encode.optional input____.size ) ]


buildModelIntInput :
    (ModelIntInputOptionalFields -> ModelIntInputOptionalFields)
    -> ModelIntInput
buildModelIntInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, attributeExists = Absent, attributeType = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType }


type alias ModelIntInputOptionalFields =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Type for the ModelIntInput input object.
-}
type alias ModelIntInput =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Encode a ModelIntInput into a value that can be used as an argument.
-}
encodeModelIntInput : ModelIntInput -> Value
encodeModelIntInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.int |> Encode.optional input____.ne ), ( "eq", Encode.int |> Encode.optional input____.eq ), ( "le", Encode.int |> Encode.optional input____.le ), ( "lt", Encode.int |> Encode.optional input____.lt ), ( "ge", Encode.int |> Encode.optional input____.ge ), ( "gt", Encode.int |> Encode.optional input____.gt ), ( "between", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ) ]


buildModelQuestionConditionInput :
    (ModelQuestionConditionInputOptionalFields -> ModelQuestionConditionInputOptionalFields)
    -> ModelQuestionConditionInput
buildModelQuestionConditionInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, contributorId = Absent, contributionDatetime = Absent, and = Absent, or = Absent, not = Absent }
    in
    ModelQuestionConditionInput { text = optionals____.text, contributorId = optionals____.contributorId, contributionDatetime = optionals____.contributionDatetime, and = optionals____.and, or = optionals____.or, not = optionals____.not }


type alias ModelQuestionConditionInputOptionalFields =
    { text : OptionalArgument ModelStringInput
    , contributorId : OptionalArgument ModelStringInput
    , contributionDatetime : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelQuestionConditionInput))
    , or : OptionalArgument (List (Maybe ModelQuestionConditionInput))
    , not : OptionalArgument ModelQuestionConditionInput
    }


{-| Type alias for the `ModelQuestionConditionInput` attributes. Note that this type
needs to use the `ModelQuestionConditionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelQuestionConditionInputRaw =
    { text : OptionalArgument ModelStringInput
    , contributorId : OptionalArgument ModelStringInput
    , contributionDatetime : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelQuestionConditionInput))
    , or : OptionalArgument (List (Maybe ModelQuestionConditionInput))
    , not : OptionalArgument ModelQuestionConditionInput
    }


{-| Type for the ModelQuestionConditionInput input object.
-}
type ModelQuestionConditionInput
    = ModelQuestionConditionInput ModelQuestionConditionInputRaw


{-| Encode a ModelQuestionConditionInput into a value that can be used as an argument.
-}
encodeModelQuestionConditionInput : ModelQuestionConditionInput -> Value
encodeModelQuestionConditionInput (ModelQuestionConditionInput input____) =
    Encode.maybeObject
        [ ( "text", encodeModelStringInput |> Encode.optional input____.text ), ( "contributorId", encodeModelStringInput |> Encode.optional input____.contributorId ), ( "contributionDatetime", encodeModelStringInput |> Encode.optional input____.contributionDatetime ), ( "and", (encodeModelQuestionConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelQuestionConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelQuestionConditionInput |> Encode.optional input____.not ) ]


buildModelQuestionFilterInput :
    (ModelQuestionFilterInputOptionalFields -> ModelQuestionFilterInputOptionalFields)
    -> ModelQuestionFilterInput
buildModelQuestionFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, text = Absent, contributorId = Absent, contributionDatetime = Absent, and = Absent, or = Absent, not = Absent }
    in
    ModelQuestionFilterInput { id = optionals____.id, text = optionals____.text, contributorId = optionals____.contributorId, contributionDatetime = optionals____.contributionDatetime, and = optionals____.and, or = optionals____.or, not = optionals____.not }


type alias ModelQuestionFilterInputOptionalFields =
    { id : OptionalArgument ModelIDInput
    , text : OptionalArgument ModelStringInput
    , contributorId : OptionalArgument ModelStringInput
    , contributionDatetime : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelQuestionFilterInput))
    , or : OptionalArgument (List (Maybe ModelQuestionFilterInput))
    , not : OptionalArgument ModelQuestionFilterInput
    }


{-| Type alias for the `ModelQuestionFilterInput` attributes. Note that this type
needs to use the `ModelQuestionFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelQuestionFilterInputRaw =
    { id : OptionalArgument ModelIDInput
    , text : OptionalArgument ModelStringInput
    , contributorId : OptionalArgument ModelStringInput
    , contributionDatetime : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelQuestionFilterInput))
    , or : OptionalArgument (List (Maybe ModelQuestionFilterInput))
    , not : OptionalArgument ModelQuestionFilterInput
    }


{-| Type for the ModelQuestionFilterInput input object.
-}
type ModelQuestionFilterInput
    = ModelQuestionFilterInput ModelQuestionFilterInputRaw


{-| Encode a ModelQuestionFilterInput into a value that can be used as an argument.
-}
encodeModelQuestionFilterInput : ModelQuestionFilterInput -> Value
encodeModelQuestionFilterInput (ModelQuestionFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelIDInput |> Encode.optional input____.id ), ( "text", encodeModelStringInput |> Encode.optional input____.text ), ( "contributorId", encodeModelStringInput |> Encode.optional input____.contributorId ), ( "contributionDatetime", encodeModelStringInput |> Encode.optional input____.contributionDatetime ), ( "and", (encodeModelQuestionFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelQuestionFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelQuestionFilterInput |> Encode.optional input____.not ) ]


buildModelSizeInput :
    (ModelSizeInputOptionalFields -> ModelSizeInputOptionalFields)
    -> ModelSizeInput
buildModelSizeInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between }


type alias ModelSizeInputOptionalFields =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    }


{-| Type for the ModelSizeInput input object.
-}
type alias ModelSizeInput =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    }


{-| Encode a ModelSizeInput into a value that can be used as an argument.
-}
encodeModelSizeInput : ModelSizeInput -> Value
encodeModelSizeInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.int |> Encode.optional input____.ne ), ( "eq", Encode.int |> Encode.optional input____.eq ), ( "le", Encode.int |> Encode.optional input____.le ), ( "lt", Encode.int |> Encode.optional input____.lt ), ( "ge", Encode.int |> Encode.optional input____.ge ), ( "gt", Encode.int |> Encode.optional input____.gt ), ( "between", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ) ]


buildModelStringInput :
    (ModelStringInputOptionalFields -> ModelStringInputOptionalFields)
    -> ModelStringInput
buildModelStringInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, attributeExists = Absent, attributeType = Absent, size = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType, size = optionals____.size }


type alias ModelStringInputOptionalFields =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Type for the ModelStringInput input object.
-}
type alias ModelStringInput =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Encode a ModelStringInput into a value that can be used as an argument.
-}
encodeModelStringInput : ModelStringInput -> Value
encodeModelStringInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.string |> Encode.optional input____.ne ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "le", Encode.string |> Encode.optional input____.le ), ( "lt", Encode.string |> Encode.optional input____.lt ), ( "ge", Encode.string |> Encode.optional input____.ge ), ( "gt", Encode.string |> Encode.optional input____.gt ), ( "contains", Encode.string |> Encode.optional input____.contains ), ( "notContains", Encode.string |> Encode.optional input____.notContains ), ( "between", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", Encode.string |> Encode.optional input____.beginsWith ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ), ( "size", encodeModelSizeInput |> Encode.optional input____.size ) ]


buildModelSubscriptionBooleanInput :
    (ModelSubscriptionBooleanInputOptionalFields -> ModelSubscriptionBooleanInputOptionalFields)
    -> ModelSubscriptionBooleanInput
buildModelSubscriptionBooleanInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq }


type alias ModelSubscriptionBooleanInputOptionalFields =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    }


{-| Type for the ModelSubscriptionBooleanInput input object.
-}
type alias ModelSubscriptionBooleanInput =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    }


{-| Encode a ModelSubscriptionBooleanInput into a value that can be used as an argument.
-}
encodeModelSubscriptionBooleanInput : ModelSubscriptionBooleanInput -> Value
encodeModelSubscriptionBooleanInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.bool |> Encode.optional input____.ne ), ( "eq", Encode.bool |> Encode.optional input____.eq ) ]


buildModelSubscriptionFloatInput :
    (ModelSubscriptionFloatInputOptionalFields -> ModelSubscriptionFloatInputOptionalFields)
    -> ModelSubscriptionFloatInput
buildModelSubscriptionFloatInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionFloatInputOptionalFields =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , in_ : OptionalArgument (List (Maybe Float))
    , notIn : OptionalArgument (List (Maybe Float))
    }


{-| Type for the ModelSubscriptionFloatInput input object.
-}
type alias ModelSubscriptionFloatInput =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , in_ : OptionalArgument (List (Maybe Float))
    , notIn : OptionalArgument (List (Maybe Float))
    }


{-| Encode a ModelSubscriptionFloatInput into a value that can be used as an argument.
-}
encodeModelSubscriptionFloatInput : ModelSubscriptionFloatInput -> Value
encodeModelSubscriptionFloatInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.float |> Encode.optional input____.ne ), ( "eq", Encode.float |> Encode.optional input____.eq ), ( "le", Encode.float |> Encode.optional input____.le ), ( "lt", Encode.float |> Encode.optional input____.lt ), ( "ge", Encode.float |> Encode.optional input____.ge ), ( "gt", Encode.float |> Encode.optional input____.gt ), ( "between", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "in", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildModelSubscriptionIDInput :
    (ModelSubscriptionIDInputOptionalFields -> ModelSubscriptionIDInputOptionalFields)
    -> ModelSubscriptionIDInput
buildModelSubscriptionIDInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionIDInputOptionalFields =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , in_ : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , notIn : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    }


{-| Type for the ModelSubscriptionIDInput input object.
-}
type alias ModelSubscriptionIDInput =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , in_ : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , notIn : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    }


{-| Encode a ModelSubscriptionIDInput into a value that can be used as an argument.
-}
encodeModelSubscriptionIDInput : ModelSubscriptionIDInput -> Value
encodeModelSubscriptionIDInput input____ =
    Encode.maybeObject
        [ ( "ne", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ne ), ( "eq", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.eq ), ( "le", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.le ), ( "lt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.lt ), ( "ge", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ge ), ( "gt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.gt ), ( "contains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.contains ), ( "notContains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.notContains ), ( "between", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.beginsWith ), ( "in", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildModelSubscriptionIntInput :
    (ModelSubscriptionIntInputOptionalFields -> ModelSubscriptionIntInputOptionalFields)
    -> ModelSubscriptionIntInput
buildModelSubscriptionIntInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionIntInputOptionalFields =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , in_ : OptionalArgument (List (Maybe Int))
    , notIn : OptionalArgument (List (Maybe Int))
    }


{-| Type for the ModelSubscriptionIntInput input object.
-}
type alias ModelSubscriptionIntInput =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , in_ : OptionalArgument (List (Maybe Int))
    , notIn : OptionalArgument (List (Maybe Int))
    }


{-| Encode a ModelSubscriptionIntInput into a value that can be used as an argument.
-}
encodeModelSubscriptionIntInput : ModelSubscriptionIntInput -> Value
encodeModelSubscriptionIntInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.int |> Encode.optional input____.ne ), ( "eq", Encode.int |> Encode.optional input____.eq ), ( "le", Encode.int |> Encode.optional input____.le ), ( "lt", Encode.int |> Encode.optional input____.lt ), ( "ge", Encode.int |> Encode.optional input____.ge ), ( "gt", Encode.int |> Encode.optional input____.gt ), ( "between", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "in", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildModelSubscriptionQuestionFilterInput :
    (ModelSubscriptionQuestionFilterInputOptionalFields -> ModelSubscriptionQuestionFilterInputOptionalFields)
    -> ModelSubscriptionQuestionFilterInput
buildModelSubscriptionQuestionFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, text = Absent, contributorId = Absent, contributionDatetime = Absent, and = Absent, or = Absent }
    in
    ModelSubscriptionQuestionFilterInput { id = optionals____.id, text = optionals____.text, contributorId = optionals____.contributorId, contributionDatetime = optionals____.contributionDatetime, and = optionals____.and, or = optionals____.or }


type alias ModelSubscriptionQuestionFilterInputOptionalFields =
    { id : OptionalArgument ModelSubscriptionIDInput
    , text : OptionalArgument ModelSubscriptionStringInput
    , contributorId : OptionalArgument ModelSubscriptionStringInput
    , contributionDatetime : OptionalArgument ModelSubscriptionStringInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionQuestionFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionQuestionFilterInput))
    }


{-| Type alias for the `ModelSubscriptionQuestionFilterInput` attributes. Note that this type
needs to use the `ModelSubscriptionQuestionFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelSubscriptionQuestionFilterInputRaw =
    { id : OptionalArgument ModelSubscriptionIDInput
    , text : OptionalArgument ModelSubscriptionStringInput
    , contributorId : OptionalArgument ModelSubscriptionStringInput
    , contributionDatetime : OptionalArgument ModelSubscriptionStringInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionQuestionFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionQuestionFilterInput))
    }


{-| Type for the ModelSubscriptionQuestionFilterInput input object.
-}
type ModelSubscriptionQuestionFilterInput
    = ModelSubscriptionQuestionFilterInput ModelSubscriptionQuestionFilterInputRaw


{-| Encode a ModelSubscriptionQuestionFilterInput into a value that can be used as an argument.
-}
encodeModelSubscriptionQuestionFilterInput : ModelSubscriptionQuestionFilterInput -> Value
encodeModelSubscriptionQuestionFilterInput (ModelSubscriptionQuestionFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelSubscriptionIDInput |> Encode.optional input____.id ), ( "text", encodeModelSubscriptionStringInput |> Encode.optional input____.text ), ( "contributorId", encodeModelSubscriptionStringInput |> Encode.optional input____.contributorId ), ( "contributionDatetime", encodeModelSubscriptionStringInput |> Encode.optional input____.contributionDatetime ), ( "and", (encodeModelSubscriptionQuestionFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelSubscriptionQuestionFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ) ]


buildModelSubscriptionStringInput :
    (ModelSubscriptionStringInputOptionalFields -> ModelSubscriptionStringInputOptionalFields)
    -> ModelSubscriptionStringInput
buildModelSubscriptionStringInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionStringInputOptionalFields =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Type for the ModelSubscriptionStringInput input object.
-}
type alias ModelSubscriptionStringInput =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Encode a ModelSubscriptionStringInput into a value that can be used as an argument.
-}
encodeModelSubscriptionStringInput : ModelSubscriptionStringInput -> Value
encodeModelSubscriptionStringInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.string |> Encode.optional input____.ne ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "le", Encode.string |> Encode.optional input____.le ), ( "lt", Encode.string |> Encode.optional input____.lt ), ( "ge", Encode.string |> Encode.optional input____.ge ), ( "gt", Encode.string |> Encode.optional input____.gt ), ( "contains", Encode.string |> Encode.optional input____.contains ), ( "notContains", Encode.string |> Encode.optional input____.notContains ), ( "between", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", Encode.string |> Encode.optional input____.beginsWith ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildUpdateQuestionInput :
    UpdateQuestionInputRequiredFields
    -> (UpdateQuestionInputOptionalFields -> UpdateQuestionInputOptionalFields)
    -> UpdateQuestionInput
buildUpdateQuestionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, contributorId = Absent, contributionDatetime = Absent }
    in
    { id = required____.id, text = optionals____.text, contributorId = optionals____.contributorId, contributionDatetime = optionals____.contributionDatetime }


type alias UpdateQuestionInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias UpdateQuestionInputOptionalFields =
    { text : OptionalArgument String
    , contributorId : OptionalArgument String
    , contributionDatetime : OptionalArgument Api.ScalarCodecs.AWSDateTime
    }


{-| Type for the UpdateQuestionInput input object.
-}
type alias UpdateQuestionInput =
    { id : Api.ScalarCodecs.Id
    , text : OptionalArgument String
    , contributorId : OptionalArgument String
    , contributionDatetime : OptionalArgument Api.ScalarCodecs.AWSDateTime
    }


{-| Encode a UpdateQuestionInput into a value that can be used as an argument.
-}
encodeUpdateQuestionInput : UpdateQuestionInput -> Value
encodeUpdateQuestionInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "text", Encode.string |> Encode.optional input____.text ), ( "contributorId", Encode.string |> Encode.optional input____.contributorId ), ( "contributionDatetime", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecAWSDateTime) |> Encode.optional input____.contributionDatetime ) ]
